// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package protodecode

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Test struct {
	FieldInt32  int32   `protobuf:"varint,1,opt,name=field_int32,json=fieldInt32,proto3" json:"field_int32,omitempty"`
	FieldString string  `protobuf:"bytes,2,opt,name=field_string,json=fieldString,proto3" json:"field_string,omitempty"`
	FieldInt64  int64   `protobuf:"varint,3,opt,name=field_int64,json=fieldInt64,proto3" json:"field_int64,omitempty"`
	FieldFloat  float32 `protobuf:"fixed32,4,opt,name=field_float,json=fieldFloat,proto3" json:"field_float,omitempty"`
	FieldBool   bool    `protobuf:"varint,5,opt,name=field_bool,json=fieldBool,proto3" json:"field_bool,omitempty"`
	// repeated
	FieldInt32S  []int32   `protobuf:"varint,31,rep,packed,name=field_int32s,json=fieldInt32s,proto3" json:"field_int32s,omitempty"`
	FieldStrings []string  `protobuf:"bytes,32,rep,name=field_strings,json=fieldStrings,proto3" json:"field_strings,omitempty"`
	FieldInt64S  []int64   `protobuf:"varint,33,rep,packed,name=field_int64s,json=fieldInt64s,proto3" json:"field_int64s,omitempty"`
	FieldFloats  []float32 `protobuf:"fixed32,34,rep,packed,name=field_floats,json=fieldFloats,proto3" json:"field_floats,omitempty"`
	FieldBools   []bool    `protobuf:"varint,35,rep,packed,name=field_bools,json=fieldBools,proto3" json:"field_bools,omitempty"`
	// nested
	FieldFoo  *Foo   `protobuf:"bytes,61,opt,name=field_foo,json=fieldFoo,proto3" json:"field_foo,omitempty"`
	FieldFoos []*Foo `protobuf:"bytes,62,rep,name=field_foos,json=fieldFoos,proto3" json:"field_foos,omitempty"`
	// map
	FieldMapStringInt32  map[string]int32 `protobuf:"bytes,70,rep,name=field_map_string_int32,json=fieldMapStringInt32,proto3" json:"field_map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_d17c78788862036e, []int{0}
}
func (m *Test) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test.Unmarshal(m, b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test.Marshal(b, m, deterministic)
}
func (dst *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(dst, src)
}
func (m *Test) XXX_Size() int {
	return xxx_messageInfo_Test.Size(m)
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

func (m *Test) GetFieldInt32() int32 {
	if m != nil {
		return m.FieldInt32
	}
	return 0
}

func (m *Test) GetFieldString() string {
	if m != nil {
		return m.FieldString
	}
	return ""
}

func (m *Test) GetFieldInt64() int64 {
	if m != nil {
		return m.FieldInt64
	}
	return 0
}

func (m *Test) GetFieldFloat() float32 {
	if m != nil {
		return m.FieldFloat
	}
	return 0
}

func (m *Test) GetFieldBool() bool {
	if m != nil {
		return m.FieldBool
	}
	return false
}

func (m *Test) GetFieldInt32S() []int32 {
	if m != nil {
		return m.FieldInt32S
	}
	return nil
}

func (m *Test) GetFieldStrings() []string {
	if m != nil {
		return m.FieldStrings
	}
	return nil
}

func (m *Test) GetFieldInt64S() []int64 {
	if m != nil {
		return m.FieldInt64S
	}
	return nil
}

func (m *Test) GetFieldFloats() []float32 {
	if m != nil {
		return m.FieldFloats
	}
	return nil
}

func (m *Test) GetFieldBools() []bool {
	if m != nil {
		return m.FieldBools
	}
	return nil
}

func (m *Test) GetFieldFoo() *Foo {
	if m != nil {
		return m.FieldFoo
	}
	return nil
}

func (m *Test) GetFieldFoos() []*Foo {
	if m != nil {
		return m.FieldFoos
	}
	return nil
}

func (m *Test) GetFieldMapStringInt32() map[string]int32 {
	if m != nil {
		return m.FieldMapStringInt32
	}
	return nil
}

type Foo struct {
	Foo                  string   `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Foo) Reset()         { *m = Foo{} }
func (m *Foo) String() string { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()    {}
func (*Foo) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_d17c78788862036e, []int{1}
}
func (m *Foo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Foo.Unmarshal(m, b)
}
func (m *Foo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Foo.Marshal(b, m, deterministic)
}
func (dst *Foo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Foo.Merge(dst, src)
}
func (m *Foo) XXX_Size() int {
	return xxx_messageInfo_Foo.Size(m)
}
func (m *Foo) XXX_DiscardUnknown() {
	xxx_messageInfo_Foo.DiscardUnknown(m)
}

var xxx_messageInfo_Foo proto.InternalMessageInfo

func (m *Foo) GetFoo() string {
	if m != nil {
		return m.Foo
	}
	return ""
}

func init() {
	proto.RegisterType((*Test)(nil), "protodecode.Test")
	proto.RegisterMapType((map[string]int32)(nil), "protodecode.Test.FieldMapStringInt32Entry")
	proto.RegisterType((*Foo)(nil), "protodecode.Foo")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_test_d17c78788862036e) }

var fileDescriptor_test_d17c78788862036e = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x4b, 0xeb, 0x30,
	0x14, 0xc6, 0x49, 0xb3, 0x5e, 0xd6, 0xb3, 0x5d, 0x18, 0xb9, 0x17, 0x0d, 0x82, 0x2c, 0xdb, 0x5e,
	0x82, 0x60, 0x85, 0xad, 0x14, 0x11, 0xf4, 0x41, 0xb0, 0xe0, 0x83, 0x2f, 0xd1, 0xf7, 0xd1, 0xb9,
	0x56, 0x86, 0x75, 0x67, 0x2c, 0x51, 0xd8, 0xdf, 0xeb, 0x3f, 0x22, 0x49, 0x33, 0xda, 0xa1, 0x3e,
	0x6d, 0x39, 0xfd, 0xbe, 0x8f, 0xdf, 0x77, 0x12, 0x00, 0x53, 0x68, 0x13, 0x6f, 0xb6, 0x68, 0x90,
	0xf5, 0xdc, 0xcf, 0xb2, 0x78, 0xc6, 0x65, 0x31, 0xfe, 0xec, 0x40, 0xe7, 0xa9, 0xd0, 0x86, 0x0d,
	0xa1, 0x57, 0xae, 0x8a, 0x6a, 0x39, 0x5f, 0xad, 0xcd, 0x6c, 0xca, 0x89, 0x20, 0x32, 0x54, 0xe0,
	0x46, 0xf7, 0x76, 0xc2, 0x46, 0xd0, 0xaf, 0x05, 0xda, 0x6c, 0x57, 0xeb, 0x17, 0x1e, 0x08, 0x22,
	0x23, 0x55, 0x9b, 0x1e, 0xdd, 0xe8, 0x20, 0x23, 0x4d, 0x38, 0x15, 0x44, 0xd2, 0x26, 0x23, 0x4d,
	0x1a, 0x41, 0x59, 0x61, 0x6e, 0x78, 0x47, 0x10, 0x19, 0x78, 0x41, 0x66, 0x27, 0xec, 0x14, 0xea,
	0xd3, 0x7c, 0x81, 0x58, 0xf1, 0x50, 0x10, 0xd9, 0x55, 0x91, 0x9b, 0xdc, 0x22, 0x56, 0x0d, 0x83,
	0x83, 0xd4, 0x7c, 0x28, 0xa8, 0x0c, 0x3d, 0x83, 0xa3, 0xd4, 0x6c, 0x02, 0x7f, 0xdb, 0x98, 0x9a,
	0x0b, 0x41, 0x65, 0xa4, 0xfa, 0x2d, 0x4e, 0x7d, 0x90, 0x93, 0x26, 0x9a, 0x8f, 0x04, 0x95, 0xb4,
	0xc9, 0x49, 0x93, 0x96, 0xc4, 0xa1, 0x6a, 0x3e, 0x16, 0x54, 0x06, 0x5e, 0xe2, 0x58, 0x75, 0xd3,
	0xc6, 0xc2, 0x6a, 0x3e, 0x11, 0x54, 0x76, 0x7d, 0x1b, 0x4b, 0xab, 0xd9, 0x39, 0x44, 0x3e, 0x03,
	0x91, 0x5f, 0x0b, 0x22, 0x7b, 0xd3, 0x41, 0xdc, 0xda, 0x7e, 0x9c, 0x21, 0xaa, 0x6e, 0x1d, 0x89,
	0xc8, 0x2e, 0xf6, 0xe5, 0x4b, 0x44, 0xcd, 0x6f, 0x04, 0xfd, 0x51, 0x1f, 0xed, 0xf5, 0x9a, 0xcd,
	0xe1, 0xa8, 0x36, 0xbc, 0xe5, 0x1b, 0xdf, 0xd7, 0x5f, 0x5f, 0xe6, 0xcc, 0x67, 0x07, 0x66, 0x7b,
	0xcd, 0x71, 0x66, 0xf5, 0x0f, 0xf9, 0xa6, 0xde, 0x84, 0xdb, 0xd9, 0xdd, 0xda, 0x6c, 0x77, 0xea,
	0x5f, 0xf9, 0xfd, 0xcb, 0x49, 0x06, 0xfc, 0x37, 0x03, 0x1b, 0x00, 0x7d, 0x2d, 0x76, 0xee, 0xa1,
	0x44, 0xca, 0xfe, 0x65, 0xff, 0x21, 0xfc, 0xc8, 0xab, 0xf7, 0xc2, 0x3d, 0x8d, 0x50, 0xd5, 0x87,
	0xab, 0xe0, 0x92, 0x8c, 0x8f, 0x81, 0xda, 0x82, 0x03, 0xa0, 0x76, 0x13, 0xde, 0x52, 0x22, 0x2e,
	0xfe, 0x38, 0xc0, 0xd9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xde, 0xf6, 0x35, 0xa0, 0xa0, 0x02,
	0x00, 0x00,
}
